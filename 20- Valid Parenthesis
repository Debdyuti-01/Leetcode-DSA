/* The idea is to iterate through the string and for each opening bracket, 
push it onto the stack. For each closing bracket, check if the stack is empty 
(which means there is no corresponding opening bracket), 
and if the top of the stack does not match the closing bracket, return false. 
Finally, if the stack is empty after processing all brackets, the string is valid. */

/* Time : O(n) , Space: O(n) */


class Solution {
    public boolean isValid(String s) {

        if (s.length() % 2 != 0)                        // If length of string is odd number, it means any one of the parenthesis is not closed. hence, not valid string
            return false;

        Stack<Character> stack = new Stack<>();       

         for (int i = 0; i < s.length(); i++)
        {
            char ch = s.charAt(i);                         // Storing the character everytime in this variable for better readability

            if(ch == '(' || ch == '[' || ch == '{' )        
                stack.add(ch);

            else if(ch == ')' || ch == ']' || ch == '}')
            {
                if(stack.isEmpty())
                    return false;
                
                char top = stack.peek();
                stack.pop();

                if ((ch == ')' && top != '(') || (ch == ']' && top != '[') || (ch == '}' && top != '{')) 
                    return false;
            }
        }
        return stack.isEmpty();
    }
}
